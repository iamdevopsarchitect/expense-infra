pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    // environment {
    //     DEBUG = 'true'
    // }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Action')
    }
    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-cred') {
                    sh """
                        cd 00-vpc
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }
        stage('Apply or Destroy') { 
            input {
                message "Should we continue to ${params.ACTION}"
                ok "Yes, we should."
            }
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 00-vpc
                        if [ ${params.ACTION} == 'apply' ]
                        then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'destroy' ]
                        then
                            terraform destroy -auto-approve
                        fi
                    """
                }
            }
        }
    } 
        // stage ('Trigger SG') {
        //     when {
        //         expression { params.ACTION == 'apply' }
        //     }
        //     steps{
        //         build job: '10-sg', parameters: [string(name: 'ACTION', value: "apply")], wait: false
        //     }
        // }
    //}


    post {
        always{
            echo "This sections runs always"
            deleteDir() //here we will get provider.exe which is huge memory
            // every time we run the tf build we will get 1 provider.exe file, 
            // if we dont delete it, with in 20 days all the memory will be out of space.
        }
        success{
            echo "This section run when pipeline success"
        }
        failure{
            echo "This section run when pipeline failure"
        }
    }
}